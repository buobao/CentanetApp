package com.cetnaline.findproperty.model.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cetnaline.findproperty.model.database.entity.School;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "centanet_school".
*/
public class SchoolDao extends AbstractDao<School, Long> {

    public static final String TABLENAME = "centanet_school";

    /**
     * Properties of entity School.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SchoolId = new Property(1, Integer.class, "SchoolId", false, "SCHOOL_ID");
        public final static Property SchoolName = new Property(2, String.class, "SchoolName", false, "SCHOOL_NAME");
        public final static Property GScopeId = new Property(3, Integer.class, "GScopeId", false, "GSCOPE_ID");
        public final static Property GScopeName = new Property(4, String.class, "GScopeName", false, "GSCOPE_NAME");
        public final static Property RegionId = new Property(5, Integer.class, "RegionId", false, "REGION_ID");
        public final static Property RegionName = new Property(6, String.class, "RegionName", false, "REGION_NAME");
        public final static Property SchoolType = new Property(7, String.class, "SchoolType", false, "SCHOOL_TYPE");
        public final static Property SchoolGrade = new Property(8, String.class, "SchoolGrade", false, "SCHOOL_GRADE");
        public final static Property SchoolFeature = new Property(9, String.class, "SchoolFeature", false, "SCHOOL_FEATURE");
        public final static Property SchoolShortName = new Property(10, String.class, "SchoolShortName", false, "SCHOOL_SHORT_NAME");
        public final static Property Address = new Property(11, String.class, "Address", false, "ADDRESS");
        public final static Property Lng = new Property(12, Double.class, "Lng", false, "LNG");
        public final static Property Lat = new Property(13, Double.class, "Lat", false, "LAT");
        public final static Property Phone = new Property(14, String.class, "Phone", false, "PHONE");
        public final static Property Remark = new Property(15, String.class, "Remark", false, "REMARK");
        public final static Property ShoolImgUrl = new Property(16, String.class, "ShoolImgUrl", false, "SHOOL_IMG_URL");
        public final static Property PinYin = new Property(17, String.class, "PinYin", false, "PIN_YIN");
    }


    public SchoolDao(DaoConfig config) {
        super(config);
    }
    
    public SchoolDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"centanet_school\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SCHOOL_ID\" INTEGER," + // 1: SchoolId
                "\"SCHOOL_NAME\" TEXT," + // 2: SchoolName
                "\"GSCOPE_ID\" INTEGER," + // 3: GScopeId
                "\"GSCOPE_NAME\" TEXT," + // 4: GScopeName
                "\"REGION_ID\" INTEGER," + // 5: RegionId
                "\"REGION_NAME\" TEXT," + // 6: RegionName
                "\"SCHOOL_TYPE\" TEXT," + // 7: SchoolType
                "\"SCHOOL_GRADE\" TEXT," + // 8: SchoolGrade
                "\"SCHOOL_FEATURE\" TEXT," + // 9: SchoolFeature
                "\"SCHOOL_SHORT_NAME\" TEXT," + // 10: SchoolShortName
                "\"ADDRESS\" TEXT," + // 11: Address
                "\"LNG\" REAL," + // 12: Lng
                "\"LAT\" REAL," + // 13: Lat
                "\"PHONE\" TEXT," + // 14: Phone
                "\"REMARK\" TEXT," + // 15: Remark
                "\"SHOOL_IMG_URL\" TEXT," + // 16: ShoolImgUrl
                "\"PIN_YIN\" TEXT);"); // 17: PinYin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"centanet_school\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, School entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer SchoolId = entity.getSchoolId();
        if (SchoolId != null) {
            stmt.bindLong(2, SchoolId);
        }
 
        String SchoolName = entity.getSchoolName();
        if (SchoolName != null) {
            stmt.bindString(3, SchoolName);
        }
 
        Integer GScopeId = entity.getGScopeId();
        if (GScopeId != null) {
            stmt.bindLong(4, GScopeId);
        }
 
        String GScopeName = entity.getGScopeName();
        if (GScopeName != null) {
            stmt.bindString(5, GScopeName);
        }
 
        Integer RegionId = entity.getRegionId();
        if (RegionId != null) {
            stmt.bindLong(6, RegionId);
        }
 
        String RegionName = entity.getRegionName();
        if (RegionName != null) {
            stmt.bindString(7, RegionName);
        }
 
        String SchoolType = entity.getSchoolType();
        if (SchoolType != null) {
            stmt.bindString(8, SchoolType);
        }
 
        String SchoolGrade = entity.getSchoolGrade();
        if (SchoolGrade != null) {
            stmt.bindString(9, SchoolGrade);
        }
 
        String SchoolFeature = entity.getSchoolFeature();
        if (SchoolFeature != null) {
            stmt.bindString(10, SchoolFeature);
        }
 
        String SchoolShortName = entity.getSchoolShortName();
        if (SchoolShortName != null) {
            stmt.bindString(11, SchoolShortName);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(12, Address);
        }
 
        Double Lng = entity.getLng();
        if (Lng != null) {
            stmt.bindDouble(13, Lng);
        }
 
        Double Lat = entity.getLat();
        if (Lat != null) {
            stmt.bindDouble(14, Lat);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(15, Phone);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(16, Remark);
        }
 
        String ShoolImgUrl = entity.getShoolImgUrl();
        if (ShoolImgUrl != null) {
            stmt.bindString(17, ShoolImgUrl);
        }
 
        String PinYin = entity.getPinYin();
        if (PinYin != null) {
            stmt.bindString(18, PinYin);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, School entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer SchoolId = entity.getSchoolId();
        if (SchoolId != null) {
            stmt.bindLong(2, SchoolId);
        }
 
        String SchoolName = entity.getSchoolName();
        if (SchoolName != null) {
            stmt.bindString(3, SchoolName);
        }
 
        Integer GScopeId = entity.getGScopeId();
        if (GScopeId != null) {
            stmt.bindLong(4, GScopeId);
        }
 
        String GScopeName = entity.getGScopeName();
        if (GScopeName != null) {
            stmt.bindString(5, GScopeName);
        }
 
        Integer RegionId = entity.getRegionId();
        if (RegionId != null) {
            stmt.bindLong(6, RegionId);
        }
 
        String RegionName = entity.getRegionName();
        if (RegionName != null) {
            stmt.bindString(7, RegionName);
        }
 
        String SchoolType = entity.getSchoolType();
        if (SchoolType != null) {
            stmt.bindString(8, SchoolType);
        }
 
        String SchoolGrade = entity.getSchoolGrade();
        if (SchoolGrade != null) {
            stmt.bindString(9, SchoolGrade);
        }
 
        String SchoolFeature = entity.getSchoolFeature();
        if (SchoolFeature != null) {
            stmt.bindString(10, SchoolFeature);
        }
 
        String SchoolShortName = entity.getSchoolShortName();
        if (SchoolShortName != null) {
            stmt.bindString(11, SchoolShortName);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(12, Address);
        }
 
        Double Lng = entity.getLng();
        if (Lng != null) {
            stmt.bindDouble(13, Lng);
        }
 
        Double Lat = entity.getLat();
        if (Lat != null) {
            stmt.bindDouble(14, Lat);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(15, Phone);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(16, Remark);
        }
 
        String ShoolImgUrl = entity.getShoolImgUrl();
        if (ShoolImgUrl != null) {
            stmt.bindString(17, ShoolImgUrl);
        }
 
        String PinYin = entity.getPinYin();
        if (PinYin != null) {
            stmt.bindString(18, PinYin);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public School readEntity(Cursor cursor, int offset) {
        School entity = new School( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // SchoolId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SchoolName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // GScopeId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // GScopeName
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // RegionId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // RegionName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SchoolType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // SchoolGrade
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // SchoolFeature
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // SchoolShortName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Address
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // Lng
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // Lat
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Phone
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Remark
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ShoolImgUrl
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // PinYin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, School entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSchoolId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSchoolName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGScopeId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setGScopeName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegionId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRegionName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSchoolType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSchoolGrade(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSchoolFeature(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSchoolShortName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLng(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setLat(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setPhone(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRemark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setShoolImgUrl(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPinYin(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(School entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(School entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(School entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
