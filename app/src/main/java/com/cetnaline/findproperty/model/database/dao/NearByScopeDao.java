package com.cetnaline.findproperty.model.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cetnaline.findproperty.model.database.entity.NearByScope;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "centanet_nearby_scope".
*/
public class NearByScopeDao extends AbstractDao<NearByScope, Long> {

    public static final String TABLENAME = "centanet_nearby_scope";

    /**
     * Properties of entity NearByScope.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GScopeId = new Property(1, Integer.class, "GScopeId", false, "GSCOPE_ID");
        public final static Property GScopeIdStr = new Property(2, String.class, "GScopeIdStr", false, "GSCOPE_ID_STR");
        public final static Property GScopeCnName = new Property(3, String.class, "GScopeCnName", false, "GSCOPE_CN_NAME");
        public final static Property FullPY = new Property(4, String.class, "FullPY", false, "FULL_PY");
        public final static Property FirstPY = new Property(5, String.class, "FirstPY", false, "FIRST_PY");
        public final static Property GScopeLevel = new Property(6, Integer.class, "GScopeLevel", false, "GSCOPE_LEVEL");
        public final static Property ParentId = new Property(7, Integer.class, "ParentId", false, "PARENT_ID");
        public final static Property Lng = new Property(8, Double.class, "Lng", false, "LNG");
        public final static Property Lat = new Property(9, Double.class, "Lat", false, "LAT");
    }


    public NearByScopeDao(DaoConfig config) {
        super(config);
    }
    
    public NearByScopeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"centanet_nearby_scope\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GSCOPE_ID\" INTEGER," + // 1: GScopeId
                "\"GSCOPE_ID_STR\" TEXT," + // 2: GScopeIdStr
                "\"GSCOPE_CN_NAME\" TEXT," + // 3: GScopeCnName
                "\"FULL_PY\" TEXT," + // 4: FullPY
                "\"FIRST_PY\" TEXT," + // 5: FirstPY
                "\"GSCOPE_LEVEL\" INTEGER," + // 6: GScopeLevel
                "\"PARENT_ID\" INTEGER," + // 7: ParentId
                "\"LNG\" REAL," + // 8: Lng
                "\"LAT\" REAL);"); // 9: Lat
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"centanet_nearby_scope\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NearByScope entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer GScopeId = entity.getGScopeId();
        if (GScopeId != null) {
            stmt.bindLong(2, GScopeId);
        }
 
        String GScopeIdStr = entity.getGScopeIdStr();
        if (GScopeIdStr != null) {
            stmt.bindString(3, GScopeIdStr);
        }
 
        String GScopeCnName = entity.getGScopeCnName();
        if (GScopeCnName != null) {
            stmt.bindString(4, GScopeCnName);
        }
 
        String FullPY = entity.getFullPY();
        if (FullPY != null) {
            stmt.bindString(5, FullPY);
        }
 
        String FirstPY = entity.getFirstPY();
        if (FirstPY != null) {
            stmt.bindString(6, FirstPY);
        }
 
        Integer GScopeLevel = entity.getGScopeLevel();
        if (GScopeLevel != null) {
            stmt.bindLong(7, GScopeLevel);
        }
 
        Integer ParentId = entity.getParentId();
        if (ParentId != null) {
            stmt.bindLong(8, ParentId);
        }
 
        Double Lng = entity.getLng();
        if (Lng != null) {
            stmt.bindDouble(9, Lng);
        }
 
        Double Lat = entity.getLat();
        if (Lat != null) {
            stmt.bindDouble(10, Lat);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NearByScope entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer GScopeId = entity.getGScopeId();
        if (GScopeId != null) {
            stmt.bindLong(2, GScopeId);
        }
 
        String GScopeIdStr = entity.getGScopeIdStr();
        if (GScopeIdStr != null) {
            stmt.bindString(3, GScopeIdStr);
        }
 
        String GScopeCnName = entity.getGScopeCnName();
        if (GScopeCnName != null) {
            stmt.bindString(4, GScopeCnName);
        }
 
        String FullPY = entity.getFullPY();
        if (FullPY != null) {
            stmt.bindString(5, FullPY);
        }
 
        String FirstPY = entity.getFirstPY();
        if (FirstPY != null) {
            stmt.bindString(6, FirstPY);
        }
 
        Integer GScopeLevel = entity.getGScopeLevel();
        if (GScopeLevel != null) {
            stmt.bindLong(7, GScopeLevel);
        }
 
        Integer ParentId = entity.getParentId();
        if (ParentId != null) {
            stmt.bindLong(8, ParentId);
        }
 
        Double Lng = entity.getLng();
        if (Lng != null) {
            stmt.bindDouble(9, Lng);
        }
 
        Double Lat = entity.getLat();
        if (Lat != null) {
            stmt.bindDouble(10, Lat);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NearByScope readEntity(Cursor cursor, int offset) {
        NearByScope entity = new NearByScope( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // GScopeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // GScopeIdStr
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // GScopeCnName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FullPY
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FirstPY
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // GScopeLevel
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // ParentId
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // Lng
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9) // Lat
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NearByScope entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGScopeId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGScopeIdStr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGScopeCnName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFullPY(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFirstPY(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGScopeLevel(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setParentId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLng(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setLat(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NearByScope entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NearByScope entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NearByScope entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
